{"version":3,"sources":["DialingGenerator/DialingGenerator.ts","DialingGenerator/PulseDialingGenerator.ts","DialingGenerator/MultiToneDialingGenerator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DialingGenerator","context","AudioContext","milliseconds","Promise","resolve","setTimeout","osc","this","createOscillator","type","frequency","value","connect","destination","start","stop","currentTime","pause","tone1","tone2","osc1","osc2","PulseDialingGenerator","number","reproduceBip","fullNumber","reproduceNumber","split","map","n","parseInt","console","log","reproduceMultiTone","App","useState","dialingType","setDialingType","numberArray","setNumberArray","pulseDialingGenerator","multiToneDialingGenerator","MultiToneDialingGenerator","className","name","id","checked","onChange","htmlFor","onClick","e","target","placeholder","reproduceNumberArray","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+SAE8BA,E,iDAChBC,QAAwB,IAAIC,a,2FAEhBC,G,0FACX,IAAIC,SAAQ,SAAAC,GACfC,YAAW,kBAAMD,MAAWF,O,8PAK5BI,EAAMC,KAAKP,QAAQQ,oBACnBC,KAAO,WACXH,EAAII,UAAUC,MAAQ,EACtBL,EAAIM,QAAQL,KAAKP,QAAQa,aACzBP,EAAIQ,QACJR,EAAIS,KAAKR,KAAKP,QAAQgB,YAAc,K,kBAC7BT,KAAKU,MAAM,M,wLAGaC,EAAeC,G,gFAC1CC,EAAOb,KAAKP,QAAQQ,mBACpBa,EAAOd,KAAKP,QAAQQ,mBAExBY,EAAKX,KAAO,OACZY,EAAKZ,KAAO,OAEZW,EAAKV,UAAUC,MAAQO,EACvBG,EAAKX,UAAUC,MAAQQ,EAEvBC,EAAKR,QAAQL,KAAKP,QAAQa,aAC1BQ,EAAKT,QAAQL,KAAKP,QAAQa,aAE1BO,EAAKN,QACLO,EAAKP,QAELM,EAAKL,KAAKR,KAAKP,QAAQgB,YAAc,IACrCK,EAAKN,KAAKR,KAAKP,QAAQgB,YAAc,I,kBAC9BT,KAAKU,MAAM,M,iHCpCLK,E,uNAEYC,G,oEACV,MAAXA,GAA6B,MAAXA,E,gBACH,IAAXA,IACAA,EAAS,I,YAENA,EAAS,G,gCACNhB,KAAKiB,e,OACXD,I,2OAMsBE,G,2FACxBlB,KAAKmB,gBAAgB,G,uBACrBnB,KAAKU,MAAM,K,OACS,kBAAfQ,IACPA,EAAaA,EAAWE,MAAM,IAAIC,KAAI,SAAAC,GAClC,MAAU,MAANA,GAAmB,MAANA,EACNC,SAASD,GAETA,M,cAGEJ,G,gEAAVF,E,QACPQ,QAAQC,IAAIT,G,UACNhB,KAAKmB,gBAAgBH,G,yBACrBhB,KAAKU,MAAM,K,mQA7BsBlB,GCA9BuB,E,uNAEYC,G,oEACV,IAAXA,E,gCACMhB,KAAK0B,mBAAmB,IAAK,M,iCACjB,IAAXV,E,iCACDhB,KAAK0B,mBAAmB,IAAK,M,kCACjB,IAAXV,E,kCACDhB,KAAK0B,mBAAmB,IAAK,M,mCACjB,IAAXV,E,kCACDhB,KAAK0B,mBAAmB,IAAK,M,mCACjB,IAAXV,E,kCACDhB,KAAK0B,mBAAmB,IAAK,M,mCACjB,IAAXV,E,kCACDhB,KAAK0B,mBAAmB,IAAK,M,mCACjB,IAAXV,E,kCACDhB,KAAK0B,mBAAmB,IAAK,M,mCACjB,IAAXV,E,kCACDhB,KAAK0B,mBAAmB,IAAK,M,mCACjB,IAAXV,E,kCACDhB,KAAK0B,mBAAmB,IAAK,M,mCACjB,IAAXV,E,kCACDhB,KAAK0B,mBAAmB,IAAK,M,4LAITR,G,2FACxBlB,KAAKU,MAAM,K,OACS,kBAAfQ,IACPA,EAAaA,EAAWE,MAAM,IAAIC,KAAI,SAAAC,GAClC,MAAU,MAANA,GAAmB,MAANA,EACNC,SAASD,GAETA,M,cAGEJ,G,gEAAVF,E,QACPQ,QAAQC,IAAIT,G,UACNhB,KAAKmB,gBAAgBH,G,yBACrBhB,KAAKU,MAAM,K,mQAvCsBlB,GCyEpCmC,MAvEf,WAAgB,IAAD,EACyBC,mBAAS,gBADlC,mBACNC,EADM,KACOC,EADP,OAEyBF,qBAFzB,mBAENG,EAFM,KAEOC,EAFP,KAILC,EAAwB,IAAIlB,EAC5BmB,EAA4B,IAAIC,EAEhChB,EAAkB,SAACH,GACD,iBAAhBa,EACAI,EAAsBd,gBAAgBH,GACf,qBAAhBa,GACPK,EAA0Bf,gBAAgBH,IAYlD,OACI,yBAAKoB,UAAU,OACX,6BACI,2BAAOC,KAAK,cACLnC,KAAK,QACLE,MAAM,eACNkC,GAAG,eACHC,QAAyB,iBAAhBV,EACTW,SAAU,kBAAMV,EAAe,mBACtC,2BAAOW,QAAQ,gBAAf,kBAEJ,6BACI,2BAAOJ,KAAK,cACLnC,KAAK,QACLE,MAAM,mBACNkC,GAAG,mBACHC,QAAyB,qBAAhBV,EACTW,SAAU,kBAAMV,EAAe,uBACtC,2BAAOW,QAAQ,oBAAf,uBAEJ,+BACI,4BACI,wBAAIC,QAAS,kBAAMvB,EAAgB,KAAI,mCACvC,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,mCACvC,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,oCAE3C,4BACI,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,mCACvC,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,mCACvC,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,oCAE3C,4BACI,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,mCACvC,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,mCACvC,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,oCAE3C,4BACI,wBAAIuB,QAAS,kBAAMvB,EAAgB,OAAM,mCACzC,wBAAIuB,QAAS,kBAAMvB,EAAgB,KAAI,mCACvC,wBAAIuB,QAAS,kBAAMvB,EAAgB,OAAM,qCAGjD,2BAAOjB,KAAK,OAAOsC,SAAU,SAAAG,GAAC,OAAIX,EAAeW,EAAEC,OAAOxC,QAAQyC,YAAY,iBAC9E,4BAAQH,QAAS,kBAnDKxB,EAmDsBa,OAlD5B,iBAAhBF,EACAI,EAAsBa,qBAAqB5B,GACpB,qBAAhBW,GACPK,EAA0BY,qBAAqB5B,IAJ1B,IAACA,IAmDtB,6BC3DQ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.0e35d80d.chunk.js","sourcesContent":["import {PhoneNumber} from \"../Interfaces/PhoneNumber\";\n\nexport default abstract class DialingGenerator {\n    protected context: AudioContext = new AudioContext();\n\n    protected async pause(milliseconds: number) {\n        return new Promise(resolve => {\n            setTimeout(() => resolve(), milliseconds);\n        });\n    }\n\n    protected async reproduceBip() {\n        let osc = this.context.createOscillator(); // instantiate an oscillator\n        osc.type = 'triangle'; // this is the default - also square, sawtooth, triangle\n        osc.frequency.value = 1; // Hz\n        osc.connect(this.context.destination); // connect it to the destination\n        osc.start(); // start the oscillator\n        osc.stop(this.context.currentTime + 0.09); // stop 2 seconds after the current time\n        return this.pause(105);\n    }\n\n    protected async reproduceMultiTone(tone1: number, tone2: number) {\n        let osc1 = this.context.createOscillator(); // instantiate an oscillator\n        let osc2 = this.context.createOscillator(); // instantiate an oscillator\n\n        osc1.type = 'sine'; // this is the default - also square, sawtooth, triangle\n        osc2.type = 'sine'; // this is the default - also square, sawtooth, triangle\n\n        osc1.frequency.value = tone1; // Hz\n        osc2.frequency.value = tone2; // Hz\n\n        osc1.connect(this.context.destination); // connect it to the destination\n        osc2.connect(this.context.destination); // connect it to the destination\n\n        osc1.start(); // start the oscillator\n        osc2.start(); // start the oscillator\n\n        osc1.stop(this.context.currentTime + 0.5); // stop 2 seconds after the current time\n        osc2.stop(this.context.currentTime + 0.5); // stop 2 seconds after the current time\n        return this.pause(510);\n    }\n\n    public abstract async reproduceNumber(number: PhoneNumber): Promise<void>\n\n    public abstract async reproduceNumberArray(fullNumber: PhoneNumber[] | string): Promise<void>\n}\n","import DialingGenerator from \"./DialingGenerator\";\nimport {PhoneNumber} from \"../Interfaces/PhoneNumber\";\n\nexport default class PulseDialingGenerator extends DialingGenerator{\n\n    public async reproduceNumber(number: PhoneNumber) {\n        if (number !== '*' && number !== '#') {\n            if (number === 0) {\n                number = 10;\n            }\n            while (number > 0) {\n                await this.reproduceBip();\n                number--;\n            }\n        }\n        return;\n    }\n\n    public async reproduceNumberArray(fullNumber: PhoneNumber[] | string) {\n        await this.reproduceNumber(1);\n        await this.pause(250);\n        if (typeof fullNumber === 'string') {\n            fullNumber = fullNumber.split('').map(n => {\n                if (n !== '#' && n !== '*')\n                    return parseInt(n);\n                else\n                    return n;\n            });\n        }\n        for (const number of fullNumber) {\n            console.log(number)\n            await this.reproduceNumber(number);\n            await this.pause(200);\n        }\n    }\n\n}\n","import DialingGenerator from \"./DialingGenerator\";\nimport {PhoneNumber} from \"../Interfaces/PhoneNumber\";\n\nexport default class PulseDialingGenerator extends DialingGenerator{\n\n    public async reproduceNumber(number: PhoneNumber) {\n        if (number === 0) {\n            await this.reproduceMultiTone(941, 1336);\n        } else if (number === 1) {\n            await this.reproduceMultiTone(697, 1209);\n        } else if (number === 2) {\n            await this.reproduceMultiTone(697, 1336);\n        } else if (number === 3) {\n            await this.reproduceMultiTone(697, 1477);\n        } else if (number === 4) {\n            await this.reproduceMultiTone(770, 1209);\n        } else if (number === 5) {\n            await this.reproduceMultiTone(770, 1336);\n        } else if (number === 6) {\n            await this.reproduceMultiTone(770, 1477);\n        } else if (number === 7) {\n            await this.reproduceMultiTone(852, 1209);\n        } else if (number === 8) {\n            await this.reproduceMultiTone(852, 1336);\n        } else if (number === 9) {\n            await this.reproduceMultiTone(852, 1477);\n        }\n    }\n\n    public async reproduceNumberArray(fullNumber: PhoneNumber[] | string) {\n        await this.pause(250);\n        if (typeof fullNumber === 'string') {\n            fullNumber = fullNumber.split('').map(n => {\n                if (n !== '#' && n !== '*')\n                    return parseInt(n);\n                else\n                    return n;\n            });\n        }\n        for (const number of fullNumber) {\n            console.log(number)\n            await this.reproduceNumber(number);\n            await this.pause(100);\n        }\n    }\n}\n","import React, {useState} from 'react';\nimport './App.scss';\nimport PulseDialingGenerator from \"./DialingGenerator/PulseDialingGenerator\";\nimport MultiToneDialingGenerator from \"./DialingGenerator/MultiToneDialingGenerator\";\n\nfunction App() {\n    let [dialingType, setDialingType] = useState('pulseDialing');\n    let [numberArray, setNumberArray] = useState();\n\n    const pulseDialingGenerator = new PulseDialingGenerator();\n    const multiToneDialingGenerator = new MultiToneDialingGenerator();\n\n    const reproduceNumber = (number: number | '*' | '#') => {\n        if (dialingType === 'pulseDialing') {\n            pulseDialingGenerator.reproduceNumber(number);\n        } else if (dialingType === 'multiToneDialing') {\n            multiToneDialingGenerator.reproduceNumber(number);\n        }\n    }\n\n    const reproduceNumberArray = (fullNumber: string) => {\n        if (dialingType === 'pulseDialing') {\n            pulseDialingGenerator.reproduceNumberArray(fullNumber);\n        } else if (dialingType === 'multiToneDialing') {\n            multiToneDialingGenerator.reproduceNumberArray(fullNumber);\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <div>\n                <input name=\"dialingType\"\n                       type=\"radio\"\n                       value=\"pulseDialing\"\n                       id=\"pulseDialing\"\n                       checked={dialingType === 'pulseDialing'}\n                       onChange={() => setDialingType('pulseDialing')}/>\n                <label htmlFor=\"pulseDialing\">Pulse dialing</label>\n            </div>\n            <div>\n                <input name=\"dialingType\"\n                       type=\"radio\"\n                       value=\"multiToneDialing\"\n                       id=\"multiToneDialing\"\n                       checked={dialingType === 'multiToneDialing'}\n                       onChange={() => setDialingType('multiToneDialing')}/>\n                <label htmlFor=\"multiToneDialing\">Multi-tone dialing</label>\n            </div>\n            <table>\n                <tr>\n                    <td onClick={() => reproduceNumber(1)}><div>1</div></td>\n                    <td onClick={() => reproduceNumber(2)}><div>2</div></td>\n                    <td onClick={() => reproduceNumber(3)}><div>3</div></td>\n                </tr>\n                <tr>\n                    <td onClick={() => reproduceNumber(4)}><div>4</div></td>\n                    <td onClick={() => reproduceNumber(5)}><div>5</div></td>\n                    <td onClick={() => reproduceNumber(6)}><div>6</div></td>\n                </tr>\n                <tr>\n                    <td onClick={() => reproduceNumber(7)}><div>7</div></td>\n                    <td onClick={() => reproduceNumber(8)}><div>8</div></td>\n                    <td onClick={() => reproduceNumber(9)}><div>9</div></td>\n                </tr>\n                <tr>\n                    <td onClick={() => reproduceNumber('*')}><div>*</div></td>\n                    <td onClick={() => reproduceNumber(0)}><div>0</div></td>\n                    <td onClick={() => reproduceNumber('#')}><div>#</div></td>\n                </tr>\n            </table>\n            <input type=\"text\" onChange={e => setNumberArray(e.target.value)} placeholder=\"Phone number\"/>\n            <button onClick={() => reproduceNumberArray(numberArray)}>Reproduces phone number</button>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}